<?xml version="1.0" encoding="UTF-8"?>
<project name="ion/dev-package" default="info" phingVersion="2.16.3">    
         
    <!-- ===========================================
        Target: validate-staging
    ============================================ -->     
    

    <target name="validate-staging" depends="init, validate-package">
        
        
    </target>      
    
    <!-- ===========================================
        Target: prepare-staging
    ============================================ -->     
    
    <target name="prepare-staging" depends="init, validate-staging">
        
        <delete dir="${state.pkg.source.dir}" includeemptydirs="true" verbose="false" failonerror="false" />                    
        
        <delete includeemptydirs="true" verbose="false" failonerror="false">
            <fileset dir="${state.pkg.dir}">
                <include name="autoloader.json" />
            </fileset>
        </delete>          

        <delete includeemptydirs="true" verbose="false" failonerror="false">
            <fileset dir="${state.pkg.dir}">
                <include name="${state.pkg.devops.glob}" />
            </fileset>
        </delete>          
    </target>    
    
    <!-- ===========================================
        Target: staging
    ============================================ -->         
    
    <target name="staging" depends="init, package">
        
        <property name="tmp.staging.previous.branch" value="${state.vcs.branches.current.name}" override="true" />        
                
        <echo msg="Creating the GIT branch '${state.vcs.branches.staging.name}' (if it doesn't exist)." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="false" passthru="true">
            <arg line="${state.vcs.cmd.branch.create} ${state.vcs.branches.staging.name}" />
        </exec>        
        
        <echo msg="Checking out the GIT branch '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.branch.current.set} ${state.vcs.branches.staging.name}" />
        </exec>
        
        <echo msg="Pushing to remote upstream." />
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.push} ${state.vcs.branches.staging.name}" />
        </exec>
        
        <echo msg="Resetting script state." />
        <phingcall target="init" />        
        
<!--        <echo msg="Pulling the GIT branch '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.pull}" />
        </exec>        -->

        <echo msg="Merging / rebasing GIT branch '${tmp.staging.previous.branch}' to '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.merge.from} ${tmp.staging.previous.branch}" />
        </exec>
        
        <echo msg="Staging changes to the current GIT branch '${state.vcs.branches.staging.name}'." />
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.state}" />
        </exec>      
        
        <echo msg="Continuing merging / rebasing GIT branch '${tmp.staging.previous.branch}' to '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="false" passthru="true">
            <arg line="${state.vcs.cmd.merge.continue} ${tmp.staging.previous.branch}" />
        </exec>            
                        
        <phingcall target="prepare-staging" />
        <phingcall target="tests" /> <!-- For STAGING: run this AFTER we've deleted the source directory; to test the builds -->
        <phingcall target="package-staging" />        
        
        <echo msg="Checking out the previous GIT branch '${tmp.staging.previous.branch}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.branch.current.set} ${tmp.staging.previous.branch}" />
        </exec>        
        
        <echo msg="Restoring script state." />
        <phingcall target="init" />
        
    </target>    
    
    <target name="package-staging">
                                                  
<!--        <if>
            <equals arg1="${state.vcs.branches.current.is.development}" arg2="1" />
            <then>
                <fail msg="This is a development branch!" />
            </then>
        </if> -->

<!--        <echo msg="Applying CI/CD configuration ('${state.pkg.devops.staging.filename}' -> '${state.pkg.devops.target.filename}')." />
        <copy file="${state.pkg.devops.staging.filename}" tofile="${state.pkg.devops.staging.filename}" overwrite="true" haltonerror="false" />-->
                                                                                                                                                                                                                                                         
                    
                                                                                           
        <echo msg="Staging changes to the current GIT branch '${state.vcs.branches.staging.name}'." />
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.state}" />
        </exec>
        
        <!-- We check the return for the commit below, since this is the development branch -->
        <echo msg="Committing changes to the current GIT branch '${state.vcs.branches.staging.name}'." />
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="false" passthru="true">
            <arg line="${state.vcs.cmd.commit} &quot;${state.vcs.commit.message}.&quot;" />
        </exec>

        <echo msg="Updating the version tag for the current GIT branch '${state.vcs.branches.staging.name}'." />
        
        <exec executable="${state.pkg.cmd}" outputProperty="tmp" dir="." checkreturn="true" passthru="false">
            <arg line="${state.pkg.cmd.version.set}${state.vcs.branches.staging.name}" />
        </exec>  
        
<!--        <fail msg="DEBUG:[${state.vcs.cmd} ${state.vcs.cmd.tag.set} v${tmp}]" />-->
        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.tag.set} v${tmp}" />
        </exec> 

        <echo msg="Pulling the GIT branch '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.pull}" />
        </exec>  

        <echo msg="Pushing to remote upstream." />
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.push} ${state.vcs.branches.staging.name}" />
        </exec>
        
    </target>
    
</project>