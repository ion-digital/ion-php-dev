<?xml version="1.0" encoding="UTF-8"?>
<project name="ion/dev-package" default="info" phingVersion="2.16.3">    
         
    <!-- ===========================================
        Target: validate-staging
    ============================================ -->     
    

    <target name="validate-staging" depends="init, validate-package">
        
        
    </target>      
    
    <!-- ===========================================
        Target: prepare-staging
    ============================================ -->     
    
    <target name="prepare-staging" depends="init, validate-staging">
        
        <delete dir="${state.pkg.source.dir}" includeemptydirs="true" verbose="false" failonerror="false" />                    
        
        <delete includeemptydirs="true" verbose="false" failonerror="false">
            <fileset dir="${state.pkg.dir}">
                <include name="autoloader.json" />
            </fileset>
        </delete>          
        
        <phingcall target="tests" />

        <delete includeemptydirs="true" verbose="false" failonerror="false">
            <fileset dir="${state.pkg.dir}">
                <include name="${state.pkg.devops.glob}" />
            </fileset>
        </delete>          
    </target>    
    
    <!-- ===========================================
        Target: staging
    ============================================ -->         
    
    <target name="staging" depends="init, package">
        
        <echo msg="Resetting script state." />
        <phingcall target="init" />

        <property name="tmp.staging.previous.branch" value="${state.vcs.branches.current.name}" override="true" />        
                
        <echo msg="Creating out the GIT branch '${state.vcs.branches.staging.name}' (if it doesn't exist)." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="false" passthru="true">
            <arg line="${state.vcs.cmd.branch.create} ${state.vcs.branches.staging.name}" />
        </exec>        
        
        <echo msg="Checking out the GIT branch '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.branch.current.set} ${state.vcs.branches.staging.name}" />
        </exec>
        
        <echo msg="Pulling the GIT branch '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.pull}" />
        </exec>        

        <echo msg="Merging rebasing GIT branch '${tmp.staging.previous.branch}' to '${state.vcs.branches.staging.name}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.merge.from} ${tmp.staging.previous.branch}" />
        </exec>
                        
        <phingcall target="prepare-staging" />
        <phingcall target="package" />        
        
        <echo msg="Checking out the previous GIT branch '${tmp.staging.previous.branch}'." />        
        <exec executable="${state.vcs.cmd}" dir="." checkreturn="true" passthru="true">
            <arg line="${state.vcs.cmd.branch.current.set} ${tmp.staging.previous.branch}" />
        </exec>        
        
        <echo msg="Restoring script state." />
        <phingcall target="init" />
        
    </target>    
    
    
    
</project>